package GUI;

import Otros.Conexion;
import java.net.URL;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

public class SalesSummary extends javax.swing.JPanel {

    Conexion con;
    ResultSet rs;

    public SalesSummary() {
        initComponents();
        con = new Conexion();
        con.Login();
        jDateFrom.setDateFormatString("dd/MM/yyyy");
        jDateUntil.setDateFormatString("dd/MM/yyyy");
        rbtnToday.setSelected(true);
        LocalDate Today = LocalDate.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd 'de' MMMM 'de' yyyy");
        String fechaFormateada = Today.format(formato);
        lblToday.setText(fechaFormateada);
    }

    private void TodaySelected() {
        lblToday.setEnabled(true);
        int CurrentMonth = LocalDate.now().getMonthValue();
        int CurrentYear = LocalDate.now().getYear();
        jMonth.setEnabled(false);
        jMonth.setMonth(CurrentMonth);
        jYear.setEnabled(false);
        jYear.setYear(CurrentYear);
        jDateFrom.setEnabled(false);
        jDateUntil.setEnabled(false);
        jDateFrom.cleanup();
        jDateUntil.cleanup();
    }

    private void MonthSelected() {
        lblToday.setEnabled(false);
        int CurrentMonth = LocalDate.now().getMonthValue();
        int CurrentYear = LocalDate.now().getYear();
        jMonth.setEnabled(true);
        jMonth.setMonth(CurrentMonth);
        jYear.setEnabled(true);
        jYear.setYear(CurrentYear);
        jDateFrom.setEnabled(false);
        jDateUntil.setEnabled(false);
        jDateFrom.cleanup();
        jDateUntil.cleanup();
    }

    private void RangeSelected() {
        lblToday.setEnabled(false);
        int CurrentMonth = LocalDate.now().getMonthValue();
        int CurrentYear = LocalDate.now().getYear();
        jMonth.setEnabled(false);
        jMonth.setMonth(CurrentMonth);
        jYear.setEnabled(false);
        jYear.setYear(CurrentYear);
        jDateFrom.setEnabled(true);
        jDateUntil.setEnabled(true);
        jDateFrom.cleanup();
        jDateUntil.cleanup();
    }

    private void ViewReport(Date filter_datefirst, Date filter_datelast) {
        try {
            HashMap<String, Object> parametros = new HashMap<>();
            parametros.put("date_first", filter_datefirst);
            parametros.put("date_last", filter_datelast);
            System.out.println("Parámetros: " + parametros);
            System.out.println("Datasource: " + con.Login());
            URL urlReport = getClass().getClassLoader().getResource("Reportes/SalesReport.jasper");
            JasperReport masterReport = null;
            masterReport = (JasperReport) JRLoader.loadObject(urlReport);
            JasperPrint masterPrint = null;
            masterPrint = JasperFillManager.fillReport(masterReport, parametros, con.Login());
            JasperViewer.viewReport(masterPrint, false);
            /* JasperPrintManager.printReport(masterPrint, false); */
        } catch (JRException ex) {
            Logger.getLogger(ListadoFicha.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDateSelect = new javax.swing.ButtonGroup();
        lblFrom = new javax.swing.JLabel();
        lblUntil = new javax.swing.JLabel();
        jDateFrom = new com.toedter.calendar.JDateChooser();
        jDateUntil = new com.toedter.calendar.JDateChooser();
        btnGenerar = new javax.swing.JButton();
        rbtnToday = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        rbtnMonth = new javax.swing.JRadioButton();
        rbtnDateRange = new javax.swing.JRadioButton();
        jMonth = new com.toedter.calendar.JMonthChooser();
        jYear = new com.toedter.calendar.JYearChooser();
        lblToday = new javax.swing.JLabel();

        lblFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFrom.setText("Desde");

        lblUntil.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUntil.setText("Hasta");

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/printer.png"))); // NOI18N
        btnGenerar.setText("Generar Reporte");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        bgDateSelect.add(rbtnToday);
        rbtnToday.setText("Hoy:");
        rbtnToday.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbtnTodayStateChanged(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/complete.png"))); // NOI18N
        jLabel1.setText("Selecciona una opción de fecha:");

        bgDateSelect.add(rbtnMonth);
        rbtnMonth.setText("Mes");
        rbtnMonth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbtnMonthStateChanged(evt);
            }
        });

        bgDateSelect.add(rbtnDateRange);
        rbtnDateRange.setText("Rango de Fechas");
        rbtnDateRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbtnDateRangeStateChanged(evt);
            }
        });

        lblToday.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGenerar)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbtnToday)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblToday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblUntil, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbtnDateRange, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(rbtnMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnToday)
                    .addComponent(lblToday))
                .addGap(18, 18, 18)
                .addComponent(rbtnMonth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rbtnDateRange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUntil, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(btnGenerar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        Date date_from = null;
        Date date_until = null;
        if (rbtnToday.isSelected()) {
            LocalDate datefrom = LocalDate.now();
            LocalDate dateuntil = LocalDate.now();
            LocalDateTime datefromwithhour = datefrom.atTime(LocalTime.of(1, 0));
            LocalDateTime dateuntilwithhour = dateuntil.atTime(LocalTime.of(23, 0));
            date_from = Date.from(datefromwithhour.atZone(ZoneId.systemDefault()).toInstant());;
            date_until = Date.from(dateuntilwithhour.atZone(ZoneId.systemDefault()).toInstant());;
            System.out.println("Filtro Desde:  (" + date_from + ")");
            System.out.println("Filtro Hasta:  (" + date_until + ")");
            ViewReport(date_from, date_until);
        } else if (rbtnMonth.isSelected()) {
            int MonthSelected = jMonth.getMonth();
            int YearSelected = jYear.getYear();
            Calendar calendar = Calendar.getInstance();
            calendar.set(YearSelected, MonthSelected, 1, 1, 0, 0);
            date_from = calendar.getTime();
            calendar.set(YearSelected, MonthSelected, 1, 23, 0, 0);
            calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
            date_until = calendar.getTime();
            System.out.println("Filtro Desde:  (" + date_from + ")");
            System.out.println("Filtro Hasta:  (" + date_until + ")");
            ViewReport(date_from, date_until);
        } else if (rbtnDateRange.isSelected()) {
            date_from = (Date) jDateFrom.getDate();
            date_until = (Date) jDateUntil.getDate();
            System.out.println("Filtro Desde:  (" + date_from + ")");
            System.out.println("Filtro Hasta:  (" + date_until + ")");
            ViewReport(date_from, date_until);
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void rbtnTodayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbtnTodayStateChanged
        if (rbtnToday.isSelected()) {
            TodaySelected();
        }
    }//GEN-LAST:event_rbtnTodayStateChanged

    private void rbtnMonthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbtnMonthStateChanged
        if (rbtnMonth.isSelected()) {
            MonthSelected();
        }
    }//GEN-LAST:event_rbtnMonthStateChanged

    private void rbtnDateRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbtnDateRangeStateChanged
        if (rbtnDateRange.isSelected()) {
            RangeSelected();
        }
    }//GEN-LAST:event_rbtnDateRangeStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgDateSelect;
    private javax.swing.JButton btnGenerar;
    private com.toedter.calendar.JDateChooser jDateFrom;
    private com.toedter.calendar.JDateChooser jDateUntil;
    private javax.swing.JLabel jLabel1;
    private com.toedter.calendar.JMonthChooser jMonth;
    private com.toedter.calendar.JYearChooser jYear;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblToday;
    private javax.swing.JLabel lblUntil;
    private javax.swing.JRadioButton rbtnDateRange;
    private javax.swing.JRadioButton rbtnMonth;
    private javax.swing.JRadioButton rbtnToday;
    // End of variables declaration//GEN-END:variables
}
